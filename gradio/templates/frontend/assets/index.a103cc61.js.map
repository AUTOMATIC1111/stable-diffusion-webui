{"version":3,"file":"index.a103cc61.js","sources":["../../../../ui/packages/app/src/components/Interpretation/utils.ts","../../../../ui/packages/app/src/components/Interpretation/InterpretationComponents/Number.svelte","../../../../ui/packages/app/src/components/Interpretation/InterpretationComponents/Dropdown.svelte","../../../../ui/packages/app/src/components/Interpretation/InterpretationComponents/Checkbox.svelte","../../../../ui/packages/app/src/components/Interpretation/InterpretationComponents/CheckboxGroup.svelte","../../../../ui/packages/app/src/components/Interpretation/InterpretationComponents/Slider.svelte","../../../../ui/packages/app/src/components/Interpretation/InterpretationComponents/Radio.svelte","../../../../ui/packages/app/src/components/Interpretation/InterpretationComponents/Image.svelte","../../../../ui/packages/app/src/components/Interpretation/InterpretationComponents/Audio.svelte","../../../../ui/packages/app/src/components/Interpretation/InterpretationComponents/Textbox.svelte","../../../../ui/packages/app/src/components/Interpretation/directory.ts","../../../../ui/packages/app/src/components/Interpretation/Interpretation.svelte","../../../../ui/packages/app/src/components/Interpretation/index.ts"],"sourcesContent":["export const getSaliencyColor = (value: number): string => {\n\tvar color: [number, number, number] | null = null;\n\tif (value < 0) {\n\t\tcolor = [52, 152, 219];\n\t} else {\n\t\tcolor = [231, 76, 60];\n\t}\n\treturn colorToString(interpolate(Math.abs(value), [255, 255, 255], color));\n};\n\nconst interpolate = (\n\tval: number,\n\trgb1: [number, number, number],\n\trgb2: [number, number, number]\n): [number, number, number] => {\n\tif (val > 1) {\n\t\tval = 1;\n\t}\n\tval = Math.sqrt(val);\n\tvar rgb: [number, number, number] = [0, 0, 0];\n\tvar i;\n\tfor (i = 0; i < 3; i++) {\n\t\trgb[i] = Math.round(rgb1[i] * (1.0 - val) + rgb2[i] * val);\n\t}\n\treturn rgb;\n};\n\nconst colorToString = (rgb: [number, number, number]): string => {\n\treturn \"rgb(\" + rgb[0] + \", \" + rgb[1] + \", \" + rgb[2] + \")\";\n};\n\nexport const getObjectFitSize = (\n\tcontains: boolean /* true = contain, false = cover */,\n\tcontainerWidth: number,\n\tcontainerHeight: number,\n\twidth: number,\n\theight: number\n) => {\n\tvar doRatio = width / height;\n\tvar cRatio = containerWidth / containerHeight;\n\tvar targetWidth = 0;\n\tvar targetHeight = 0;\n\tvar test = contains ? doRatio > cRatio : doRatio < cRatio;\n\n\tif (test) {\n\t\ttargetWidth = containerWidth;\n\t\ttargetHeight = targetWidth / doRatio;\n\t} else {\n\t\ttargetHeight = containerHeight;\n\t\ttargetWidth = targetHeight * doRatio;\n\t}\n\n\treturn {\n\t\twidth: targetWidth,\n\t\theight: targetHeight,\n\t\tx: (containerWidth - targetWidth) / 2,\n\t\ty: (containerHeight - targetHeight) / 2\n\t};\n};\n","<script lang=\"ts\">\n\timport { getSaliencyColor } from \"../utils\";\n\timport { BlockTitle } from \"@gradio/atoms\";\n\n\texport let interpretation: Array<[number, number]>;\n\texport let label: string = \"\";\n</script>\n\n<div class=\"input-number\">\n\t<BlockTitle>{label}</BlockTitle>\n\t<div class=\"range\">\n\t\t{#each interpretation as interpret_value}\n\t\t\t<div\n\t\t\t\tclass=\"item\"\n\t\t\t\tstyle={\"background-color: \" + getSaliencyColor(interpret_value[1])}\n\t\t\t>\n\t\t\t\t{interpret_value[0]}\n\t\t\t</div>\n\t\t{/each}\n\t</div>\n</div>\n\n<style>\n\t.input-number {\n\t\ttransition: 150ms;\n\t\tbox-shadow: var(--shadow-drop);\n\t\tbackground: var(--background-fill-secondary);\n\t}\n\n\t.input-number:hover {\n\t\tbox-shadow: var(--shadow-drop-lg);\n\t}\n\t.range {\n\t\tdisplay: flex;\n\t}\n\n\t.item {\n\t\tflex: 1 1 0%;\n\t}\n</style>\n","<script lang=\"ts\">\n\timport { getSaliencyColor } from \"../utils\";\n\timport { BlockTitle } from \"@gradio/atoms\";\n\n\texport let interpretation: Array<number>;\n\texport let choices: Array<string>;\n\texport let label: string = \"\";\n</script>\n\n<div>\n\t<BlockTitle>{label}</BlockTitle>\n\t<ul class=\"dropdown-menu\">\n\t\t{#each choices as choice, i}\n\t\t\t<li\n\t\t\t\tclass=\"dropdown-item\"\n\t\t\t\tstyle={\"background-color: \" + getSaliencyColor(interpretation[i])}\n\t\t\t>\n\t\t\t\t{choice}\n\t\t\t</li>\n\t\t{/each}\n\t</ul>\n</div>\n\n<style>\n\t.dropdown-menu {\n\t\tbox-shadow: var(--shadow-drop);\n\t}\n\t.dropdown-item {\n\t\tdisplay: block;\n\t\ttransition: 150ms;\n\t\tcursor: pointer;\n\t\tbackground: var(--background-fill-primary);\n\t\tpadding: var(--size-2) var(--size-3);\n\t\twhite-space: nowrap;\n\t}\n\n\t.dropdown-item:first-child {\n\t\tborder-top-right-radius: var(--radius-md);\n\t\tborder-top-left-radius: var(--radius-md);\n\t}\n\t.dropdown-item:last-child {\n\t\tborder-bottom-right-radius: var(--radius-md);\n\t\tborder-bottom-left-radius: var(--radius-md);\n\t}\n\n\t.dropdown-item:hover {\n\t\tfont-weight: var(--weight-semibold);\n\t}\n</style>\n","<script lang=\"ts\">\n\timport { getSaliencyColor } from \"../utils\";\n\timport { BlockTitle } from \"@gradio/atoms\";\n\n\texport let label: string = \"\";\n\texport let original: boolean;\n\texport let interpretation: [number, number];\n</script>\n\n<div class=\"input-checkbox\">\n\t<BlockTitle>{label}</BlockTitle>\n\t<button class=\"checkbox-item\" class:selected={original}>\n\t\t<div\n\t\t\tclass=\"checkbox\"\n\t\t\tstyle={\"background-color: \" + getSaliencyColor(interpretation[0])}\n\t\t/>\n\t\t<div\n\t\t\tclass=\"checkbox\"\n\t\t\tstyle={\"background-color: \" + getSaliencyColor(interpretation[1])}\n\t\t>\n\t\t\t<svg viewBox=\"-10 -10 20 20\">\n\t\t\t\t<line\n\t\t\t\t\tx1=\"-7.5\"\n\t\t\t\t\ty1=\"0\"\n\t\t\t\t\tx2=\"-2.5\"\n\t\t\t\t\ty2=\"5\"\n\t\t\t\t\tstroke=\"black\"\n\t\t\t\t\tstroke-width=\"4\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t/>\n\t\t\t\t<line\n\t\t\t\t\tx1=\"-2.5\"\n\t\t\t\t\ty1=\"5\"\n\t\t\t\t\tx2=\"7.5\"\n\t\t\t\t\ty2=\"-7.5\"\n\t\t\t\t\tstroke=\"black\"\n\t\t\t\t\tstroke-width=\"4\"\n\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t/>\n\t\t\t</svg>\n\t\t</div>\n\t</button>\n</div>\n\n<style lang=\"postcss\">\n\t.input-checkbox {\n\t\tdisplay: inline-block;\n\t}\n\n\tsvg {\n\t\twidth: var(--size-4);\n\t\theight: var(--size-3);\n\t}\n\t.selected svg {\n\t\topacity: 1;\n\t}\n\t.input-checkbox {\n\t\tdisplay: flex;\n\t\tgap: var(--size-1);\n\t\tcursor: pointer;\n\t\tborder-radius: var(--radius-md);\n\t\tpadding: var(--size-2) var(--size-3);\n\t}\n\n\t.checkbox {\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t\tborder: 1px solid var(--border-color-primary);\n\t\tbackground: var(--background-fill-primary);\n\t\twidth: var(--size-4);\n\t\theight: var(--size-4);\n\t}\n\n\t.checkbox-item {\n\t\ttransition: 150ms;\n\t\tbox-shadow: var(--shadow-drop);\n\t\tbackground: var(--background-fill-primary);\n\t}\n\n\t.checkbox-item:hover {\n\t\tbox-shadow: var(--shadow-drop-lg);\n\t}\n\t.checkbox-item.selected {\n\t\tbackground: var(--color-accent-base);\n\t\tcolor: white;\n\t}\n</style>\n","<script lang=\"ts\">\n\timport { getSaliencyColor } from \"../utils\";\n\timport { BlockTitle } from \"@gradio/atoms\";\n\n\texport let original: Array<string>;\n\texport let interpretation: Array<[number, number]>;\n\texport let choices: Array<string>;\n\texport let label: string = \"\";\n</script>\n\n<div class=\"input-checkbox-group\">\n\t<BlockTitle>{label}</BlockTitle>\n\t{#each choices as choice, i}\n\t\t<button class=\"checkbox-item \" class:selected={original.includes(choice)}>\n\t\t\t<div\n\t\t\t\tclass=\"checkbox\"\n\t\t\t\tstyle={\"background-color: \" + getSaliencyColor(interpretation[i][0])}\n\t\t\t/>\n\t\t\t<div\n\t\t\t\tclass=\"checkbox\"\n\t\t\t\tstyle={\"background-color: \" + getSaliencyColor(interpretation[i][1])}\n\t\t\t>\n\t\t\t\t<svg viewBox=\"-10 -10 20 20\">\n\t\t\t\t\t<line\n\t\t\t\t\t\tx1=\"-7.5\"\n\t\t\t\t\t\ty1=\"0\"\n\t\t\t\t\t\tx2=\"-2.5\"\n\t\t\t\t\t\ty2=\"5\"\n\t\t\t\t\t\tstroke=\"black\"\n\t\t\t\t\t\tstroke-width=\"4\"\n\t\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\t/>\n\t\t\t\t\t<line\n\t\t\t\t\t\tx1=\"-2.5\"\n\t\t\t\t\t\ty1=\"5\"\n\t\t\t\t\t\tx2=\"7.5\"\n\t\t\t\t\t\ty2=\"-7.5\"\n\t\t\t\t\t\tstroke=\"black\"\n\t\t\t\t\t\tstroke-width=\"4\"\n\t\t\t\t\t\tstroke-linecap=\"round\"\n\t\t\t\t\t/>\n\t\t\t\t</svg>\n\t\t\t</div>\n\t\t\t{choice}\n\t\t</button>\n\t{/each}\n</div>\n\n<style lang=\"postcss\">\n\tsvg {\n\t\twidth: var(--size-4);\n\t\theight: var(--size-3);\n\t}\n\t.selected svg {\n\t\topacity: 1;\n\t}\n\t.input-checkbox-group {\n\t\tdisplay: flex;\n\t\tflex-wrap: wrap;\n\t\tgap: var(--size-2);\n\t}\n\n\t.checkbox-item {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: var(--size-1);\n\t\ttransition: 150ms;\n\t\tcursor: pointer;\n\t\tbox-shadow: var(--shadow-drop);\n\t\tborder-radius: var(--radius-md);\n\t\tbackground: var(--background-fill-primary);\n\t\tpadding: var(--size-2) var(--size-3);\n\t\tfont-weight: var(--weight-semibold);\n\t}\n\n\t.checkbox-item:hover {\n\t\tbox-shadow: var(--shadow-drop-lg);\n\t}\n\n\t.checkbox {\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t\tborder: 1px solid var(--border-color-primary);\n\t\tbackground: var(--background-fill-primary);\n\t\twidth: var(--size-4);\n\t\theight: var(--size-4);\n\t}\n\t.checkbox-item.selected {\n\t\tbackground: var(--color-accent-base);\n\t\tcolor: white;\n\t}\n\t.selected .checkbox {\n\t\tbackground: var(--color-accent-base);\n\t}\n\n\t.checkbox-item {\n\t\ttransition: 150ms;\n\t\tbox-shadow: var(--shadow-drop);\n\t\tbackground: var(--background-fill-primary);\n\t}\n\n\t.checkbox-item.selected {\n\t\tbackground: var(--color-accent-base);\n\t\tcolor: white;\n\t}\n</style>\n","<script lang=\"ts\">\n\timport { getSaliencyColor } from \"../utils\";\n\timport { BlockTitle } from \"@gradio/atoms\";\n\n\texport let original: number;\n\texport let interpretation: Array<number>;\n\texport let minimum: number;\n\texport let maximum: number;\n\texport let step: number;\n\texport let label: string = \"\";\n</script>\n\n<div class=\"input-slider\">\n\t<BlockTitle>{label}</BlockTitle>\n\t<input type=\"range\" disabled min={minimum} max={maximum} {step} />\n\t<div class=\"range \">\n\t\t{#each interpretation as interpret_value}\n\t\t\t<div style={\"background-color: \" + getSaliencyColor(interpret_value)} />\n\t\t{/each}\n\t</div>\n\t<div class=\"original\">\n\t\t{original}\n\t</div>\n</div>\n\n<style>\n\tinput::-webkit-slider-thumb,\n\t.range::-moz-range-thumb {\n\t\t-webkit-appearance: none;\n\t\tappearance: none;\n\t\tcursor: pointer;\n\t\tborder-radius: var(--radius-md);\n\t\twidth: var(--size-5);\n\t\theight: var(--size-5);\n\t}\n\n\t.input-slider {\n\t\ttext-align: center;\n\t}\n\n\t.range {\n\t\tdisplay: flex;\n\t}\n\n\tinput {\n\t\ttransition: 150ms;\n\t\tbox-shadow: var(--shadow-drop);\n\t\tborder-radius: var(--radius-md);\n\t\tbackground: var(--background-fill-primary);\n\t\twidth: var(--size-full);\n\t\theight: var(--size-3);\n\t}\n\n\tinput:hover {\n\t\tbox-shadow: var(--shadow-drop-lg);\n\t}\n\n\tinput::-webkit-slider-thumb,\n\tinput::-moz-range-thumb {\n\t\tbox-shadow: var(--shadow-drop);\n\t\tbackground: linear-gradient(\n\t\t\tto bottom,\n\t\t\tvar(--color-orange-300),\n\t\t\tvar(--color-orange-500)\n\t\t);\n\t}\n\n\t.original {\n\t\tdisplay: inline-block;\n\t\tmargin: var(--size-1) auto;\n\t\tborder-radius: var(--radius-md);\n\t\tpadding: var(--size-0-5) var(--size-2);\n\t}\n\n\t.range > div {\n\t\tflex: 1 1 0%;\n\t\theight: var(--size-4);\n\t}\n</style>\n","<script lang=\"ts\">\n\timport { getSaliencyColor } from \"../utils\";\n\timport { BlockTitle } from \"@gradio/atoms\";\n\n\texport let original: string;\n\texport let interpretation: Array<number>;\n\texport let choices: Array<string>;\n\texport let label: string = \"\";\n</script>\n\n<div class=\"input-radio\">\n\t<BlockTitle>{label}</BlockTitle>\n\t{#each choices as choice, i}\n\t\t<button class=\"radio-item\" class:selected={original === choice}>\n\t\t\t<div\n\t\t\t\tclass=\"radio-circle\"\n\t\t\t\tstyle={\"background-color: \" + getSaliencyColor(interpretation[i])}\n\t\t\t/>\n\t\t\t{choice}\n\t\t</button>\n\t{/each}\n</div>\n\n<style>\n\t.input-radio {\n\t\tdisplay: flex;\n\t\tflex-wrap: wrap;\n\t\tgap: var(--size-2);\n\t}\n\n\t.radio-item {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tgap: var(--size-2);\n\t\ttransition: 150ms;\n\t\tcursor: pointer;\n\t\tborder-radius: var(--radius-md);\n\t\tbackground: var(--background-fill-primary);\n\t\tpadding: var(--size-2) var(--size-3);\n\t\tfont-weight: var(--weight-semibold);\n\t}\n\n\t.radio-item:hover {\n\t\tbox-shadow: var(--shadow-drop-lg);\n\t}\n\t.radio-circle {\n\t\tbox-sizing: border-box;\n\t\tborder-radius: var(--radius-full);\n\t\twidth: var(--size-4);\n\t\theight: var(--size-4);\n\t}\n\t.radio-item.selected {\n\t\tbox-shadow: var(--shadow-drop);\n\t\tbackground: var(--color-accent-base);\n\t\tcolor: white;\n\t}\n</style>\n","<script lang=\"ts\">\n\timport { getSaliencyColor, getObjectFitSize } from \"../utils\";\n\timport { afterUpdate } from \"svelte\";\n\timport { BlockTitle } from \"@gradio/atoms\";\n\n\texport let original: string;\n\texport let interpretation: Array<Array<number>>;\n\texport let shape: undefined | [number, number];\n\texport let label: string = \"\";\n\n\tlet saliency_layer: HTMLCanvasElement;\n\tlet image: HTMLImageElement;\n\n\tconst paintSaliency = (\n\t\tdata: Array<Array<number>>,\n\t\tctx: CanvasRenderingContext2D,\n\t\twidth: number,\n\t\theight: number\n\t) => {\n\t\tvar cell_width = width / data[0].length;\n\t\tvar cell_height = height / data.length;\n\t\tvar r = 0;\n\t\tdata.forEach(function (row) {\n\t\t\tvar c = 0;\n\t\t\trow.forEach(function (cell) {\n\t\t\t\tctx.fillStyle = getSaliencyColor(cell);\n\t\t\t\tctx.fillRect(c * cell_width, r * cell_height, cell_width, cell_height);\n\t\t\t\tc++;\n\t\t\t});\n\t\t\tr++;\n\t\t});\n\t};\n\n\tafterUpdate(() => {\n\t\tlet size = getObjectFitSize(\n\t\t\ttrue,\n\t\t\timage.width,\n\t\t\timage.height,\n\t\t\timage.naturalWidth,\n\t\t\timage.naturalHeight\n\t\t);\n\t\tif (shape) {\n\t\t\tsize = getObjectFitSize(\n\t\t\t\ttrue,\n\t\t\t\tsize.width,\n\t\t\t\tsize.height,\n\t\t\t\tshape[0],\n\t\t\t\tshape[1]\n\t\t\t);\n\t\t}\n\t\tlet width = size.width;\n\t\tlet height = size.height;\n\t\tsaliency_layer.setAttribute(\"height\", `${height}`);\n\t\tsaliency_layer.setAttribute(\"width\", `${width}`);\n\t\tpaintSaliency(\n\t\t\tinterpretation,\n\t\t\tsaliency_layer.getContext(\"2d\")!,\n\t\t\twidth,\n\t\t\theight\n\t\t);\n\t});\n</script>\n\n<div class=\"input-image\">\n\t<BlockTitle>{label}</BlockTitle>\n\t<div class=\"image-preview\">\n\t\t<!-- svelte-ignore a11y-missing-attribute -->\n\t\t<div class=\"interpretation\">\n\t\t\t<canvas bind:this={saliency_layer} />\n\t\t</div>\n\t\t<!-- svelte-ignore a11y-missing-attribute -->\n\t\t<img bind:this={image} src={original} />\n\t</div>\n</div>\n\n<style>\n\t.image-preview {\n\t\tdisplay: flex;\n\t\tposition: relative;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t\tbackground: var(--background-fill-primary);\n\t\twidth: var(--size-full);\n\t\theight: var(--size-60);\n\t}\n\n\t.interpretation {\n\t\tdisplay: flex;\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t\topacity: 0.9;\n\t\ttransition: 150ms;\n\t\twidth: var(--size-full);\n\t\theight: var(--size-full);\n\t}\n\n\t.interpretation:hover {\n\t\topacity: 0.2;\n\t}\n\timg {\n\t\twidth: var(--size-full);\n\t\theight: var(--size-full);\n\t\tobject-fit: contain;\n\t}\n</style>\n","<script lang=\"ts\">\n\timport { getSaliencyColor } from \"../utils\";\n\timport { BlockTitle } from \"@gradio/atoms\";\n\texport let interpretation: Array<number>;\n\texport let label: string = \"\";\n</script>\n\n<div>\n\t<BlockTitle>{label}</BlockTitle>\n\t<div class=\"range\">\n\t\t{#each interpretation as interpret_value}\n\t\t\t<div\n\t\t\t\tclass=\"item\"\n\t\t\t\tstyle={\"background-color: \" + getSaliencyColor(interpret_value)}\n\t\t\t/>\n\t\t{/each}\n\t</div>\n</div>\n\n<style>\n\t.range {\n\t\tdisplay: flex;\n\t}\n\n\t.item {\n\t\tdisplay: flex;\n\t\theight: var(--size-4);\n\t}\n</style>\n","<script lang=\"ts\">\n\timport { getSaliencyColor } from \"../utils\";\n\timport { BlockTitle } from \"@gradio/atoms\";\n\texport let label: string = \"\";\n\texport let interpretation: Array<[string, number]>;\n</script>\n\n<div class=\"input-text\">\n\t<BlockTitle>{label}</BlockTitle>\n\t{#each interpretation as [text, saliency]}\n\t\t<span\n\t\t\tclass=\"text-span\"\n\t\t\tstyle={\"background-color: \" + getSaliencyColor(saliency)}\n\t\t>\n\t\t\t{text}\n\t\t</span>\n\t{/each}\n</div>\n\n<style>\n\t.input-text {\n\t\tborder-radius: var(--radius-md);\n\t\tpadding: var(--size-2);\n\t\twidth: var(--size-full);\n\t\toverflow-wrap: break-word;\n\t}\n\n\t.text-span {\n\t\tpadding: var(--size-1);\n\t}\n</style>\n","import InterpretationNumber from \"./InterpretationComponents/Number.svelte\";\nimport InterpretationDropdown from \"./InterpretationComponents/Dropdown.svelte\";\nimport InterpretationCheckbox from \"./InterpretationComponents/Checkbox.svelte\";\nimport InterpretationCheckboxGroup from \"./InterpretationComponents/CheckboxGroup.svelte\";\nimport InterpretationSlider from \"./InterpretationComponents/Slider.svelte\";\nimport InterpretationRadio from \"./InterpretationComponents/Radio.svelte\";\nimport InterpretationImage from \"./InterpretationComponents/Image.svelte\";\nimport InterpretationAudio from \"./InterpretationComponents/Audio.svelte\";\nimport InterpretationTextbox from \"./InterpretationComponents/Textbox.svelte\";\n\nexport const component_map = {\n\taudio: InterpretationAudio,\n\tdropdown: InterpretationDropdown,\n\tcheckbox: InterpretationCheckbox,\n\tcheckboxgroup: InterpretationCheckboxGroup,\n\tnumber: InterpretationNumber,\n\tslider: InterpretationSlider,\n\tradio: InterpretationRadio,\n\timage: InterpretationImage,\n\ttextbox: InterpretationTextbox\n};\n","<script lang=\"ts\">\n\timport type { ComponentType } from \"svelte\";\n\timport type { SvelteComponentDev } from \"svelte/internal\";\n\timport { component_map } from \"./directory\";\n\n\texport let component: keyof typeof component_map;\n\texport let component_props: Record<string, any>;\n\texport let value: any;\n\n\t$: _component = component_map[component] as ComponentType<SvelteComponentDev>;\n</script>\n\n{#if value}\n\t<svelte:component\n\t\tthis={_component}\n\t\t{...component_props}\n\t\toriginal={value.original}\n\t\tinterpretation={value.interpretation}\n\t/>\n{/if}\n","export { default as Component } from \"./Interpretation.svelte\";\nexport const modes = [\"dynamic\"];\n"],"names":["InterpretationAudio","InterpretationDropdown","InterpretationCheckbox","InterpretationCheckboxGroup","InterpretationNumber","InterpretationSlider","InterpretationRadio","InterpretationImage","InterpretationTextbox"],"mappings":"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"}