{"version":3,"file":"dsv.7fe76a93.js","sources":["../../../../ui/node_modules/.pnpm/d3-dsv@3.0.1/node_modules/d3-dsv/src/dsv.js"],"sourcesContent":["var EOL = {},\n    EOF = {},\n    QUOTE = 34,\n    NEWLINE = 10,\n    RETURN = 13;\n\nfunction objectConverter(columns) {\n  return new Function(\"d\", \"return {\" + columns.map(function(name, i) {\n    return JSON.stringify(name) + \": d[\" + i + \"] || \\\"\\\"\";\n  }).join(\",\") + \"}\");\n}\n\nfunction customConverter(columns, f) {\n  var object = objectConverter(columns);\n  return function(row, i) {\n    return f(object(row), i, columns);\n  };\n}\n\n// Compute unique columns in order of discovery.\nfunction inferColumns(rows) {\n  var columnSet = Object.create(null),\n      columns = [];\n\n  rows.forEach(function(row) {\n    for (var column in row) {\n      if (!(column in columnSet)) {\n        columns.push(columnSet[column] = column);\n      }\n    }\n  });\n\n  return columns;\n}\n\nfunction pad(value, width) {\n  var s = value + \"\", length = s.length;\n  return length < width ? new Array(width - length + 1).join(0) + s : s;\n}\n\nfunction formatYear(year) {\n  return year < 0 ? \"-\" + pad(-year, 6)\n    : year > 9999 ? \"+\" + pad(year, 6)\n    : pad(year, 4);\n}\n\nfunction formatDate(date) {\n  var hours = date.getUTCHours(),\n      minutes = date.getUTCMinutes(),\n      seconds = date.getUTCSeconds(),\n      milliseconds = date.getUTCMilliseconds();\n  return isNaN(date) ? \"Invalid Date\"\n      : formatYear(date.getUTCFullYear(), 4) + \"-\" + pad(date.getUTCMonth() + 1, 2) + \"-\" + pad(date.getUTCDate(), 2)\n      + (milliseconds ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \":\" + pad(seconds, 2) + \".\" + pad(milliseconds, 3) + \"Z\"\n      : seconds ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \":\" + pad(seconds, 2) + \"Z\"\n      : minutes || hours ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \"Z\"\n      : \"\");\n}\n\nexport default function(delimiter) {\n  var reFormat = new RegExp(\"[\\\"\" + delimiter + \"\\n\\r]\"),\n      DELIMITER = delimiter.charCodeAt(0);\n\n  function parse(text, f) {\n    var convert, columns, rows = parseRows(text, function(row, i) {\n      if (convert) return convert(row, i - 1);\n      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);\n    });\n    rows.columns = columns || [];\n    return rows;\n  }\n\n  function parseRows(text, f) {\n    var rows = [], // output rows\n        N = text.length,\n        I = 0, // current character index\n        n = 0, // current line number\n        t, // current token\n        eof = N <= 0, // current token followed by EOF?\n        eol = false; // current token followed by EOL?\n\n    // Strip the trailing newline.\n    if (text.charCodeAt(N - 1) === NEWLINE) --N;\n    if (text.charCodeAt(N - 1) === RETURN) --N;\n\n    function token() {\n      if (eof) return EOF;\n      if (eol) return eol = false, EOL;\n\n      // Unescape quotes.\n      var i, j = I, c;\n      if (text.charCodeAt(j) === QUOTE) {\n        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);\n        if ((i = I) >= N) eof = true;\n        else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        return text.slice(j + 1, i - 1).replace(/\"\"/g, \"\\\"\");\n      }\n\n      // Find next delimiter or newline.\n      while (I < N) {\n        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        else if (c !== DELIMITER) continue;\n        return text.slice(j, i);\n      }\n\n      // Return last token before EOF.\n      return eof = true, text.slice(j, N);\n    }\n\n    while ((t = token()) !== EOF) {\n      var row = [];\n      while (t !== EOL && t !== EOF) row.push(t), t = token();\n      if (f && (row = f(row, n++)) == null) continue;\n      rows.push(row);\n    }\n\n    return rows;\n  }\n\n  function preformatBody(rows, columns) {\n    return rows.map(function(row) {\n      return columns.map(function(column) {\n        return formatValue(row[column]);\n      }).join(delimiter);\n    });\n  }\n\n  function format(rows, columns) {\n    if (columns == null) columns = inferColumns(rows);\n    return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join(\"\\n\");\n  }\n\n  function formatBody(rows, columns) {\n    if (columns == null) columns = inferColumns(rows);\n    return preformatBody(rows, columns).join(\"\\n\");\n  }\n\n  function formatRows(rows) {\n    return rows.map(formatRow).join(\"\\n\");\n  }\n\n  function formatRow(row) {\n    return row.map(formatValue).join(delimiter);\n  }\n\n  function formatValue(value) {\n    return value == null ? \"\"\n        : value instanceof Date ? formatDate(value)\n        : reFormat.test(value += \"\") ? \"\\\"\" + value.replace(/\"/g, \"\\\"\\\"\") + \"\\\"\"\n        : value;\n  }\n\n  return {\n    parse: parse,\n    parseRows: parseRows,\n    format: format,\n    formatBody: formatBody,\n    formatRows: formatRows,\n    formatRow: formatRow,\n    formatValue: formatValue\n  };\n}\n"],"names":[],"mappings":"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"}